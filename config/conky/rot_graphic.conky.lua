require 'cairo'
require 'bit'
local socket=require'socket'

-- fonts - https:--github.com/powerline/fonts/tree/master/Terminus/BDF
-- const unsigned short font[1][18] = { -- each char is 10 wide
fontTable = { -- each char is 10 wide and 18 high
{0x0000, -- [1] - blackdiamond 
 0x0000,
 0x0000,
 0x0000,
 0x0C00,
 0x1E00,
 0x3F00,
 0x7F80,
 0xFFC0,
 0xFFC0,
 0x7F80,
 0x3F00,
 0x1E00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0xAA80, -- [2] - shade 
 0x5540,
 0xAA80,
 0x5540,
 0xAA80,
 0x5540,
 0xAA80,
 0x5540,
 0xAA80,
 0x5540,
 0xAA80,
 0x5540,
 0xAA80,
 0x5540,
 0xAA80,
 0x5540,
 0xAA80,
 0x5540},
{0x0000, -- [3] - uni2409 
 0x0000,
 0xCC00,
 0xCC00,
 0xFC00,
 0xCC00,
 0xCC00,
 0xCC00,
 0x0000,
 0x1F80,
 0x0600,
 0x0600,
 0x0600,
 0x0600,
 0x0600,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [4] - uni240C 
 0x0000,
 0xFC00,
 0xC000,
 0xF000,
 0xC000,
 0xC000,
 0xC000,
 0x0000,
 0x1F80,
 0x1800,
 0x1E00,
 0x1800,
 0x1800,
 0x1800,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [5] - uni240D 
 0x0000,
 0x7800,
 0xCC00,
 0xC000,
 0xC000,
 0xCC00,
 0x7800,
 0x0000,
 0x1F00,
 0x1980,
 0x1980,
 0x1F00,
 0x1B00,
 0x1980,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [6] - uni240A 
 0x0000,
 0xC000,
 0xC000,
 0xC000,
 0xC000,
 0xC000,
 0xFC00,
 0x0000,
 0x1F80,
 0x1800,
 0x1E00,
 0x1800,
 0x1800,
 0x1800,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [7] - degree 
 0x1E00,
 0x3300,
 0x3300,
 0x3300,
 0x1E00,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [8] - plusminus 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0C00,
 0x0C00,
 0x0C00,
 0x7F80,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x7F80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [9] - uni2424 
 0x0000,
 0xCC00,
 0xEC00,
 0xFC00,
 0xDC00,
 0xCC00,
 0xCC00,
 0x0000,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x1F80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [10] - uni240B 
 0x0000,
 0xCC00,
 0xCC00,
 0xCC00,
 0xCC00,
 0x7800,
 0x3000,
 0x0000,
 0x0000,
 0x1F80,
 0x0600,
 0x0600,
 0x0600,
 0x0600,
 0x0600,
 0x0000,
 0x0000},
{0x0C00, -- [11] - SF040000 
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0xFC00,
 0xFC00,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [12] - SF030000 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0xFC00,
 0xFC00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00},
{0x0000, -- [13] - SF010000 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0FC0,
 0x0FC0,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00},
{0x0C00, -- [14] - SF020000 
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0FC0,
 0x0FC0,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0C00, -- [15] - SF050000 
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0xFFC0,
 0xFFC0,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00},
{0xFFC0, -- [16] - uni23BA 
 0xFFC0,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [17] - uni23BB 
 0x0000,
 0x0000,
 0x0000,
 0xFFC0,
 0xFFC0,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [18] - SF100000 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0xFFC0,
 0xFFC0,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [19] - uni23BC 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0xFFC0,
 0xFFC0,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [20] - uni23BD 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0xFFC0,
 0xFFC0},
{0x0C00, -- [21] - SF080000 
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0FC0,
 0x0FC0,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00},
{0x0C00, -- [22] - SF090000 
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0xFC00,
 0xFC00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00},
{0x0C00, -- [23] - SF070000 
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0xFFC0,
 0xFFC0,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [24] - SF060000 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0xFFC0,
 0xFFC0,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00},
{0x0C00, -- [25] - SF110000 
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00},
{0x0000, -- [26] - lessequal 
 0x0000,
 0x0000,
 0x0300,
 0x0600,
 0x0C00,
 0x1800,
 0x3000,
 0x3000,
 0x1800,
 0x0C00,
 0x0600,
 0x0300,
 0x0000,
 0x7F80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [27] - greaterequal 
 0x0000,
 0x0000,
 0x3000,
 0x1800,
 0x0C00,
 0x0600,
 0x0300,
 0x0300,
 0x0600,
 0x0C00,
 0x1800,
 0x3000,
 0x0000,
 0x7F80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [28] - pi 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x7F80,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [29] - notequal 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0180,
 0x7F80,
 0x0600,
 0x0C00,
 0x1800,
 0x7F80,
 0x6000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [30] - sterling 
 0x0000,
 0x0000,
 0x1E00,
 0x3300,
 0x3000,
 0x3000,
 0x3000,
 0x7E00,
 0x3000,
 0x3000,
 0x3000,
 0x3000,
 0x3180,
 0x7F80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [31] - periodcentered 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [32] - space 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [33] - exclam 
 0x0000,
 0x0000,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [34] - quotedbl 
 0x3300,
 0x3300,
 0x3300,
 0x3300,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [35] - numbersign 
 0x0000,
 0x0000,
 0x3300,
 0x3300,
 0x3300,
 0x7F80,
 0x3300,
 0x3300,
 0x3300,
 0x3300,
 0x7F80,
 0x3300,
 0x3300,
 0x3300,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [36] - dollar 
 0x0000,
 0x0C00,
 0x0C00,
 0x3F00,
 0x6D80,
 0x6C00,
 0x6C00,
 0x6C00,
 0x3F00,
 0x0D80,
 0x0D80,
 0x0D80,
 0x6D80,
 0x3F00,
 0x0C00,
 0x0C00,
 0x0000},
{0x0000, -- [37] - percent 
 0x0000,
 0x0000,
 0x7300,
 0x5300,
 0x7600,
 0x0600,
 0x0C00,
 0x0C00,
 0x1800,
 0x1800,
 0x3000,
 0x3700,
 0x6500,
 0x6700,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [38] - ampersand 
 0x0000,
 0x0000,
 0x3C00,
 0x6600,
 0x6600,
 0x6600,
 0x3C00,
 0x3980,
 0x6D80,
 0xC700,
 0xC300,
 0xC300,
 0x6780,
 0x3D80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [39] - quotesingle 
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [40] - parenleft 
 0x0000,
 0x0000,
 0x0600,
 0x0C00,
 0x0C00,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x0C00,
 0x0C00,
 0x0600,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [41] - parenright 
 0x0000,
 0x0000,
 0x1800,
 0x0C00,
 0x0C00,
 0x0600,
 0x0600,
 0x0600,
 0x0600,
 0x0600,
 0x0600,
 0x0C00,
 0x0C00,
 0x1800,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [42] - asterisk 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x6300,
 0x3600,
 0x1C00,
 0xFF80,
 0x1C00,
 0x3600,
 0x6300,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [43] - plus 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0C00,
 0x0C00,
 0x0C00,
 0x7F80,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [44] - comma 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0C00,
 0x0C00,
 0x0C00,
 0x1800,
 0x0000,
 0x0000},
{0x0000, -- [45] - hyphen 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x7F80,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [46] - period 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [47] - slash 
 0x0000,
 0x0000,
 0x0300,
 0x0300,
 0x0600,
 0x0600,
 0x0C00,
 0x0C00,
 0x1800,
 0x1800,
 0x3000,
 0x3000,
 0x6000,
 0x6000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [48] - zero 
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6180,
 0x6380,
 0x6780,
 0x6D80,
 0x7980,
 0x7180,
 0x6180,
 0x6180,
 0x6180,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [49] - one 
 0x0000,
 0x0000,
 0x0C00,
 0x1C00,
 0x3C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [50] - two 
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6180,
 0x6180,
 0x0180,
 0x0300,
 0x0600,
 0x0C00,
 0x1800,
 0x3000,
 0x6000,
 0x7F80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [51] - three 
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6180,
 0x0180,
 0x0180,
 0x1F00,
 0x0180,
 0x0180,
 0x0180,
 0x6180,
 0x6180,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [52] - four 
 0x0000,
 0x0000,
 0x0180,
 0x0380,
 0x0780,
 0x0D80,
 0x1980,
 0x3180,
 0x6180,
 0x6180,
 0x7F80,
 0x0180,
 0x0180,
 0x0180,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [53] - five 
 0x0000,
 0x0000,
 0x7F80,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x7F00,
 0x0180,
 0x0180,
 0x0180,
 0x6180,
 0x6180,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [54] - six 
 0x0000,
 0x0000,
 0x1F00,
 0x3000,
 0x6000,
 0x6000,
 0x6000,
 0x7F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [55] - seven 
 0x0000,
 0x0000,
 0x7F80,
 0x6180,
 0x6180,
 0x0180,
 0x0300,
 0x0300,
 0x0600,
 0x0600,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [56] - eight 
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [57] - nine 
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3F80,
 0x0180,
 0x0180,
 0x0180,
 0x0300,
 0x3E00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [58] - colon 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [59] - semicolon 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0C00,
 0x0C00,
 0x0C00,
 0x1800,
 0x0000,
 0x0000},
{0x0000, -- [60] - less 
 0x0000,
 0x0000,
 0x0300,
 0x0600,
 0x0C00,
 0x1800,
 0x3000,
 0x6000,
 0x6000,
 0x3000,
 0x1800,
 0x0C00,
 0x0600,
 0x0300,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [61] - equal 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x7F80,
 0x0000,
 0x0000,
 0x0000,
 0x7F80,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [62] - greater 
 0x0000,
 0x0000,
 0x6000,
 0x3000,
 0x1800,
 0x0C00,
 0x0600,
 0x0300,
 0x0300,
 0x0600,
 0x0C00,
 0x1800,
 0x3000,
 0x6000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [63] - question 
 0x0000,
 0x0000,
 0x1E00,
 0x3300,
 0x6180,
 0x6180,
 0x0180,
 0x0300,
 0x0600,
 0x0C00,
 0x0C00,
 0x0000,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [64] - at 
 0x0000,
 0x0000,
 0x7F00,
 0xC180,
 0xC180,
 0xCF80,
 0xD980,
 0xD980,
 0xD980,
 0xD980,
 0xCF80,
 0xC000,
 0xC000,
 0x7F80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [65] - A 
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x7F80,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [66] - B 
 0x0000,
 0x0000,
 0x7F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x7F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x7F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [67] - C 
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6180,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6180,
 0x6180,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [68] - D 
 0x0000,
 0x0000,
 0x7E00,
 0x6300,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6300,
 0x7E00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [69] - E 
 0x0000,
 0x0000,
 0x7F80,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x7E00,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x7F80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [70] - F 
 0x0000,
 0x0000,
 0x7F80,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x7E00,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [71] - G 
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6180,
 0x6000,
 0x6000,
 0x6000,
 0x6780,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [72] - H 
 0x0000,
 0x0000,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x7F80,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [73] - I 
 0x0000,
 0x0000,
 0x1E00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x1E00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [74] - J 
 0x0000,
 0x0000,
 0x0780,
 0x0300,
 0x0300,
 0x0300,
 0x0300,
 0x0300,
 0x0300,
 0x0300,
 0x6300,
 0x6300,
 0x6300,
 0x3E00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [75] - K 
 0x0000,
 0x0000,
 0x6180,
 0x6180,
 0x6300,
 0x6600,
 0x6C00,
 0x7800,
 0x7800,
 0x6C00,
 0x6600,
 0x6300,
 0x6180,
 0x6180,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [76] - L 
 0x0000,
 0x0000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x7F80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [77] - M 
 0x0000,
 0x0000,
 0x8080,
 0xC180,
 0xE380,
 0xF780,
 0xDD80,
 0xC980,
 0xC180,
 0xC180,
 0xC180,
 0xC180,
 0xC180,
 0xC180,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [78] - N 
 0x0000,
 0x0000,
 0x6180,
 0x6180,
 0x6180,
 0x7180,
 0x7980,
 0x6D80,
 0x6780,
 0x6380,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [79] - O 
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [80] - P 
 0x0000,
 0x0000,
 0x7F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x7F00,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [81] - Q 
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6780,
 0x3F00,
 0x0300,
 0x0180,
 0x0000},
{0x0000, -- [82] - R 
 0x0000,
 0x0000,
 0x7F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x7F00,
 0x7800,
 0x6C00,
 0x6600,
 0x6300,
 0x6180,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [83] - S 
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6180,
 0x6000,
 0x6000,
 0x3F00,
 0x0180,
 0x0180,
 0x0180,
 0x6180,
 0x6180,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [84] - T 
 0x0000,
 0x0000,
 0x7F80,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [85] - U 
 0x0000,
 0x0000,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [86] - V 
 0x0000,
 0x0000,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3300,
 0x3300,
 0x3300,
 0x3300,
 0x1E00,
 0x1E00,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [87] - W 
 0x0000,
 0x0000,
 0xC180,
 0xC180,
 0xC180,
 0xC180,
 0xC180,
 0xC180,
 0xC980,
 0xDD80,
 0xF780,
 0xE380,
 0xC180,
 0x8080,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [88] - X 
 0x0000,
 0x0000,
 0x6180,
 0x6180,
 0x3300,
 0x3300,
 0x1E00,
 0x0C00,
 0x0C00,
 0x1E00,
 0x3300,
 0x3300,
 0x6180,
 0x6180,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [89] - Y 
 0x0000,
 0x0000,
 0x6180,
 0x6180,
 0x6180,
 0x3300,
 0x3300,
 0x1E00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [90] - Z 
 0x0000,
 0x0000,
 0x7F80,
 0x0180,
 0x0180,
 0x0300,
 0x0600,
 0x0C00,
 0x1800,
 0x3000,
 0x6000,
 0x6000,
 0x6000,
 0x7F80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [91] - bracketleft 
 0x0000,
 0x0000,
 0x1E00,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x1E00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [92] - backslash 
 0x0000,
 0x0000,
 0x6000,
 0x6000,
 0x3000,
 0x3000,
 0x1800,
 0x1800,
 0x0C00,
 0x0C00,
 0x0600,
 0x0600,
 0x0300,
 0x0300,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [93] - bracketright 
 0x0000,
 0x0000,
 0x1E00,
 0x0600,
 0x0600,
 0x0600,
 0x0600,
 0x0600,
 0x0600,
 0x0600,
 0x0600,
 0x0600,
 0x0600,
 0x1E00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [94] - asciicircum 
 0x0C00,
 0x1E00,
 0x3300,
 0x6180,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [95] - underscore 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x7F80,
 0x0000},
{0x1800, -- [96] - grave 
 0x0C00,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [97] - a 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x3F00,
 0x0180,
 0x0180,
 0x3F80,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3F80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [98] - b 
 0x0000,
 0x0000,
 0x6000,
 0x6000,
 0x6000,
 0x7F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x7F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [99] - c 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6180,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [100] - d 
 0x0000,
 0x0000,
 0x0180,
 0x0180,
 0x0180,
 0x3F80,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3F80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [101] - e 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6180,
 0x6180,
 0x7F80,
 0x6000,
 0x6000,
 0x6180,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [102] - f 
 0x0000,
 0x0000,
 0x0780,
 0x0C00,
 0x0C00,
 0x3F00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [103] - g 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x3F80,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3F80,
 0x0180,
 0x0180,
 0x3F00},
{0x0000, -- [104] - h 
 0x0000,
 0x0000,
 0x6000,
 0x6000,
 0x6000,
 0x7F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [105] - i 
 0x0000,
 0x0000,
 0x0C00,
 0x0C00,
 0x0000,
 0x1C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x1E00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [106] - j 
 0x0000,
 0x0000,
 0x0300,
 0x0300,
 0x0000,
 0x0700,
 0x0300,
 0x0300,
 0x0300,
 0x0300,
 0x0300,
 0x0300,
 0x0300,
 0x0300,
 0x3300,
 0x3300,
 0x1E00},
{0x0000, -- [107] - k 
 0x0000,
 0x0000,
 0x6000,
 0x6000,
 0x6000,
 0x6180,
 0x6300,
 0x6600,
 0x6C00,
 0x7800,
 0x6C00,
 0x6600,
 0x6300,
 0x6180,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [108] - l 
 0x0000,
 0x0000,
 0x1C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x1E00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [109] - m 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x7F00,
 0x6D80,
 0x6D80,
 0x6D80,
 0x6D80,
 0x6D80,
 0x6D80,
 0x6D80,
 0x6D80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [110] - n 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x7F00, 
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [111] - o 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [112] - p 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x7F00,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x7F00,
 0x6000,
 0x6000,
 0x6000},
{0x0000, -- [113] - q 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x3F80,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3F80,
 0x0180,
 0x0180,
 0x0180},
{0x0000, -- [114] - r 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x6F80,
 0x7800,
 0x7000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x6000,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [115] - s 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x3F00,
 0x6180,
 0x6000,
 0x6000,
 0x3F00,
 0x0180,
 0x0180,
 0x6180,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [116] - t 
 0x0000,
 0x0000,
 0x1800,
 0x1800,
 0x1800,
 0x7E00,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x1800,
 0x0F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [117] - u 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3F80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [118] - v 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x6180,
 0x6180,
 0x6180,
 0x3300,
 0x3300,
 0x3300,
 0x1E00,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [119] - w 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x6180,
 0x6180,
 0x6180,
 0x6D80,
 0x6D80,
 0x6D80,
 0x6D80,
 0x6D80,
 0x3F00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [120] - x 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x6180,
 0x6180,
 0x3300,
 0x1E00,
 0x0C00,
 0x1E00,
 0x3300,
 0x6180,
 0x6180,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [121] - y 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x6180,
 0x3F80,
 0x0180,
 0x0180,
 0x3F00},
{0x0000, -- [122] - z 
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x7F80,
 0x0180,
 0x0300,
 0x0600,
 0x0C00,
 0x1800,
 0x3000,
 0x6000,
 0x7F80,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [123] - braceleft 
 0x0000,
 0x0000,
 0x0700,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x3800,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0700,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [124] - bar 
 0x0000,
 0x0000,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [125] - braceright 
 0x0000,
 0x0000,
 0x3800,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0700,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x0C00,
 0x3800,
 0x0000,
 0x0000,
 0x0000},
{0x0000, -- [126] - asciitilde 
 0x3980,
 0x6D80,
 0x6D80,
 0x6700,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000,
 0x0000},
}


scale = 2
Width = 1920*2
Height = 1080*2

charWidth = 10
charHeight = 18

-- displayWidth = 120
displayWidth = 60
displayHeight = 18
displayContents = {}
displayContentsLast = {}


function init_cairo()
  if conky_window == nil then
    return false
  end

  cs = cairo_xlib_surface_create(
    conky_window.display,
    conky_window.drawable,
    conky_window.visual,
    conky_window.width,
    conky_window.height)

  cr = cairo_create(cs)

  font = "Inconsolata"

  cairo_select_font_face(cr, font, CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL)
  cairo_set_source_rgba(cr, 0.933,0.905,0.894,1)
  return true
end

function conky_main()
  if (not init_cairo()) then
    return
  end

  updatesPrSecond = 1/conky_info["update_interval"];
  t = conky_info["update_interval"]*(tonumber(conky_parse('${updates}')));
  period = 1;
  t=t/10;

  -- displayContents = {}
  for i=1,displayWidth do
    displayContents[i] = {}     -- create a new row
    displayContentsLast[i] = {}     -- create a new row
    for j=1,displayHeight do
      displayContents[i][j] = 0
      displayContentsLast[i][j] = 0
    end
  end

-- TIME
  -- cairo_set_font_size(cr, 130)
  -- cairo_move_to(cr, 644, 230)
  -- cairo_show_text(cr, conky_parse("${time %H:%M}"))
  -- cairo_stroke(cr)
  
  -- DATE
  -- cairo_set_font_size(cr, 27)
  -- cairo_move_to(cr, 664, 280)
  -- local time_str = string.format('%-12s', conky_parse("${time %A,}"))..conky_parse("${time %d.%m.%Y}")
  -- cairo_show_text(cr, time_str)
  -- cairo_stroke(cr)

  local time_str = os.date("%H") .. ((os.time() % 2 == 0) and ":" or " ") .. os.date("%M")
  local time_strLast = os.date("%H", os.time()-1) .. (((os.time()-1) % 2 == 0) and ":" or " ") .. os.date("%M", os.time()-1)

  local volume = tonumber(conky_parse('${exec amixer sget Master | grep -oPm 1 [0-9]+% | grep -oP [0-9]+}'));
  local battery = tonumber(conky_parse('${exec acpi | grep -oPm 1 [0-9]+% | grep -oP [0-9]+}'));
  local brightness = tonumber(conky_parse('${exec /home/anton/.files/scripts/backlightGet}'));
  
  local cx,cy,radius = Width/4*3, Height/2, Height/6;
  --  draw_sphere(Width/4*1,cy,radius);
  -- draw_background();
  
  draw_tetrahedron(Width/4*1,cy,radius*.1+radius*.9*battery/100);
  draw_dodecahedron(Width/4*2,cy,radius*.1+radius*.9*brightness/100);
  draw_icosahedron(Width/4*3,cy,radius*.1+radius*.9*volume/100);
 
  display_file("/home/anton/todo", 100);

  -- writeToDisplay(time_str, displayContents)
  -- writeToDisplay(time_strLast, displayContentsLast)
  -- draw_dotgrid()
  
  cairo_destroy(cr);
  cairo_surface_destroy(cs);
  cr = nil;
end

-- Compatibility: Lua-5.1
function split(str, pat)
   local t = {}  -- NOTE: use {n = 0} in Lua-5.0
   local fpat = "(.-)" .. pat
   local last_end = 1
   local s, e, cap = str:find(fpat, 1)
   while s do
      if s ~= 1 or cap ~= "" then
         table.insert(t,cap)
      end
      last_end = e+1
      s, e, cap = str:find(fpat, last_end)
   end
   if last_end <= #str then
      cap = str:sub(last_end)
      table.insert(t, cap)
   end
   return t
end

function display_file(path, width)
	local fontHeight = 15;
	local fontSize = 14;
	local fontWidth = 7.25;
	local maxLength = 10;
	local leftPadding = 10;
	local topPadding = 10;
	local linePadding = 2;
	local content = conky_parse('${exec cat '..path..'}');

    cairo_set_source_rgb(cr, 0x7c/0xff, 0x9f/0xff, 0xa6/0xff);
    cairo_set_font_size(cr, fontSize*scale);
    content = split(content, '\n');
    local nLines = table.getn(content);
    
	-- for each line
    for i=1,nLines do
    	local s = content[i];
    	local l = string.len(s);

    	if l > maxLength then
    		maxLength = l;
    	end

    	-- write that line
	    cairo_move_to(cr, 6+leftPadding*scale, scale*(topPadding + i*fontSize+(i-1)*linePadding));
    	cairo_show_text(cr, s);
    end


    -- borders
    drawLine(
    	scale*(leftPadding*2+maxLength*fontWidth),0, 
    	scale*(leftPadding*2+maxLength*fontWidth),scale*(nLines*fontHeight+(nLines-1)*linePadding+topPadding*2), 
    	scale
    );
    drawLine(
    	scale*(leftPadding*2+maxLength*fontWidth),scale*(nLines*fontHeight+(nLines-1)*linePadding+topPadding*2), 
    	0							  			 ,scale*(nLines*fontHeight+(nLines-1)*linePadding+topPadding*2),
    	scale
    );
end

function draw_background()
  pat = cairo_pattern_create_radial (Width/2, Height/2, 100,
                                   Width/2,  Height/2, Height/2*(1+math.sin(t)*0.02));
  cairo_pattern_add_color_stop_rgba (pat, 0, 0.5, 0.5, 0.5, 0.2);
  cairo_pattern_add_color_stop_rgba (pat, 1, 0.0, 0.0, 0.0, 0.0);
  cairo_set_source (cr, pat);
  cairo_arc (cr, Width/2, Height/2, Height/2*(1+math.sin(t)*0.02), 0, 2 * 3.14);
  cairo_fill (cr);
  cairo_pattern_destroy (pat);
end

function writeToDisplay(str, buffer)
  local x = (displayWidth-(string.len(str)*10))/2
  for i=1,string.len(str) do
    putCharToDisplay(str, i, x, buffer)
    x = x+10
  end
end

function putCharToDisplay(text, index, _x, buffer)
  byte = string.byte(text, index)
  for x = 1,charWidth do
    for y = 1,charHeight do
      if (bit.band(fontTable[byte][y], (bit.rshift(bit.lshift(1,16),x))) > 0) then
        buffer[_x+x][y] = 1
      end
    end
  end
end 

function draw_dotgrid()
  local size,spacing = 6,8;
  spacing = spacing*2;

  -- Yellow
  cairo_set_source_rgba(cr, 229.0/255, 214.0/255, 45.0/255, 1)
  
  -- BackgroundColor
  -- cairo_set_source_rgba(cr, 0x23/0xff, 0x2C/0xff, 0x33/0xff, 1);
  -- Black
  -- cairo_set_source_rgba(cr, 38/255, 37/255, 32/255, 1)
  for x = 1,displayWidth do
    for y = 1,displayHeight do
      if displayContents[x][y] > 0 or displayContentsLast[x][y] > 0 then

        cairo_translate(cr, (Width-displayWidth*spacing)/2+(spacing*x)-2, Height*0.2+spacing*(y));
        cairo_rotate(cr, math.pi/4)
        local partTime = socket.gettime()%1*10
        
        if displayContents[x][y] == displayContentsLast[x][y] then
          cairo_arc(cr, 0,0, size, 0, 2*math.pi);
        elseif displayContents[x][y] > 0 then -- turning on
          cairo_scale(cr, 1, partTime > 1 and 1 or partTime);
          cairo_arc(cr, 0,0, size, 0, 2*math.pi);
        elseif displayContentsLast[x][y] > 0 then -- turning off
          cairo_scale(cr, 1, 1-(partTime > 1 and 0.999 or partTime));
          cairo_arc(cr, 0,0, size, 0, 2*math.pi);
        end
        cairo_fill(cr);
        cairo_scale(cr, 1, 1);
        cairo_identity_matrix(cr)
      end
    end
  end
end

function drawLine(x1,y1, x2,y2, size)
  cairo_set_line_width(cr, size);
  cairo_move_to(cr, x1,y1);
  cairo_line_to(cr, x2,y2);
  cairo_stroke(cr);
end
function drawPoint(x,y,size)
  cairo_arc(cr, x,y, size, 0, 2*math.pi);
  cairo_fill(cr);
end

function rotate_x(p, angle)
  local c = math.cos(angle);
  local s = math.sin(angle);
  matrix = {
    {1,0,0},
    {0,c,-s},
    {0,s, c}
  };

  return matrix_vector_product(matrix, p);
end
function rotate_y(p, angle)
  local c = math.cos(angle);
  local s = math.sin(angle);
  matrix = {
    { c, 0, s},
    { 0, 1, 0},
    {-s, 0, c}
  };

  return matrix_vector_product(matrix, p);
end
function rotate_z(p, angle)
  local c = math.cos(angle);
  local s = math.sin(angle);
  matrix = {
    {c,-s,0},
    {s,c,0},
    {0,0, 1}
  };
  return matrix_vector_product(matrix, p);
end

function matrix_vector_product(matrix, vector)
  local result = {}
  for i,row in pairs(matrix) do
    result[i] = 0;
    for j, v in pairs(vector) do
      result[i] = result[i] + row[j]*v;
    end
  end

  return result;
end

function draw_dodecahedron(cx, cy, radius)
  local pointSize = 10;
  local lineSize = 4;
  local q = 0.577350269;
  local t = 0.934172359;
  local y = 0.35682209;
  
-- (±1,  ±1,  ±1)
-- ( 0,  ±ϕ,  ±1/ϕ)
-- (±1/ϕ, 0,  ±ϕ)
-- (±ϕ,  ±1/ϕ, 0)

  local vertices = {
    { q, q, q},
    { q, q,-q},
    { q,-q, q},
    { q,-q,-q},
    {-q, q, q},
    {-q, q,-q},
    {-q,-q, q},
    {-q,-q,-q},

    { 0, t, y},
    { 0, t,-y},
    { 0,-t, y},
    { 0,-t,-y},

    { y, 0, t},
    { y, 0,-t},
    {-y, 0, t},
    {-y, 0,-t},

    { t, y, 0},
    { t,-y, 0},
    {-t, y, 0},
    {-t,-y, 0},

  };
  local edges = {
    {1,9},  {1,13}, {1,17},
    {2,10}, {2,14}, {2,17},
    {3,11}, {3,13}, {3,18},
    {4,12}, {4,14}, {4,18},
    {5,9},  {5,15}, {5,19},
    {6,10}, {6,16}, {6,19},
    {7,11}, {7,15}, {7,20},
    {8,12}, {8,16}, {8,20},
    
    {9,10},
    {11,12},
    
    {17,18},
    {19,20},
    
    {13,15},
    {14,16},
  };

  -- draw_mesh(cx,cy,vertices, edges,radius,0xBF, 0x9C, 0x86);
  draw_mesh(cx,cy,vertices, edges,radius,0x7c, 0x9f, 0xa6, 100);
end
function draw_tetrahedron(cx, cy, radius)
  local pointSize = 10;
  local lineSize = 4;
  local q = 0.57735026919; -- bound coordinates to the unit circle
  
  local vertices = {
    { q, q, q},
    { q,-q,-q},
    {-q, q,-q},
    {-q,-q, q}
  };
  local edges = {
    {1,2},
    {1,3},
    {1,4},
    {2,3},
    {3,4},
    {4,2}
  };

  -- draw_mesh(cx,cy,vertices, edges,radius,0xbf, 0xb7, 0xa1);
  draw_mesh(cx,cy,vertices, edges,radius,0x7c, 0x9f, 0xa6, 200);
end
function draw_icosahedron(cx, cy, radius)
  local q = 0.5663; -- bound coordinates to the unit circle
  local w = 0.916320109; -- bound coordinates to the unit circle
  local vertices = {
    { 0, q, w},
    { q, w, 0},
    { w, 0, q},
    { 0,-q, w},
    {-q, w, 0},
    { w, 0,-q},
    { 0, q,-w},
    { q,-w, 0},
    {-w, 0, q},
    { 0,-q,-w},
    {-q,-w, 0},
    {-w, 0,-q}
  };
  local edges = {
    {1,2}, {2,3}, 
    {1,3}, {3,4}, 
    {1,4}, {4,9},
    {1,9}, {9,5},
    {1,5}, {5,2}, 

    {6,2},  {2, 3},
    {6,3},  {3, 8},
    {6,8},  {8, 10},
    {6,10}, {10, 7},
    {6,7},  {7, 2},

    {11,4},  {4,  8},
    {11,8},  {8,  10},
    {11,10}, {10, 12},
    {11,12}, {12, 9},
    {11,9},  {9,  4},

    {12,5},
    {12,7},
    {5,7},
  };
  -- draw_mesh(cx,cy,vertices, edges,radius,0x99,0x73,0x6e);
  draw_mesh(cx,cy,vertices, edges,radius,0x7c, 0x9f, 0xa6,300);
end

function draw_ellipse(x, y, size, rx, ry, rz)
  cairo_save(cr);
  
  cairo_translate(cr, x, y);
  cairo_scale(cr, math.cos(ry), math.cos(rx));
  cairo_translate(cr, -x, -y);
  cairo_arc(cr, x, y, size*1.25, 0, math.pi*2);
  
  cairo_restore(cr);

  cairo_stroke(cr);
end

function draw_mesh(x,y,vertices, edges, scale,r,g,b,timeOffset)
  local pointSize = 10*scale/(Height/8);  
  local lineSize = 4*scale/(Height/8);

  for index,point in pairs(vertices) do
    point = rotate_x(point,(t+timeOffset)/2);
    point = rotate_y(point,(t+timeOffset)/3);
    point = rotate_z(point,(t+timeOffset)/5);
    vertices[index] = point;

    local shadeAmount = (point[3]>0 and 0 or -point[3]*.5);
    cairo_set_source_rgba(cr, 0x7c/0xff, 0x9f/0xff, 0xa6/0xff, 1-shadeAmount);
    -- cairo_set_source_rgba(cr, r/0xff, g/0xff, b/0xff, 1);

    drawPoint(x+point[1]*scale, y+point[2]*scale, pointSize);
  end

  for index,line in pairs(edges) do
    z = vertices[line[1]][3]+vertices[line[2]][3]/2;
    local shadeAmount = (z>0 and 0 or -z*.5);
    cairo_set_source_rgba(cr, 0x7c/0xff, 0x9f/0xff, 0xa6/0xff, 1-shadeAmount);
    -- cairo_set_source_rgba(cr, r/0xff, g/0xff, b/0xff, 1);

    drawLine(
      x+vertices[line[1]][1]*scale, y+vertices[line[1]][2]*scale,
      x+vertices[line[2]][1]*scale, y+vertices[line[2]][2]*scale,
      lineSize);
  end
  -- draw_ellipse(x,y,scale*1.3, 0,  t,0);
  -- draw_ellipse(x,y,scale*1.2, t/1.2,0,0);
end

-- function draw_icosahedron(cx, cy, radius)
--   local pointSize = 10;
--   local lineSize = 4;
--   cairo_set_source_rgba(cr, 0x7c/0xff, 0x9f/0xff, 0xa6/0xff, 1);
--   radius = radius + math.cos(t+math.pi)*radius/10;
--   drawPoint(cx,cy-radius,pointSize);
--   drawPoint(cx,cy+radius,pointSize);


--   for i=0,5,1 do
--     local y = (radius*2/3)-radius;
--     local sub_radi = radius*math.cos(y/(radius*2)*math.pi);
--     local x = sub_radi*math.cos(t+(math.pi*2)/5*i);
--     local z = math.sin(t+(math.pi*2)/5*i);
   
--     local shadeAmount = (z<0 and 0 or z*.75);
--     cairo_set_source_rgba(cr, (0x7c/0xff), (0x9f/0xff), (0xa6/0xff), 1-shadeAmount);
    
--     drawLine(cx,cy-radius,cx+x,cy+y-z*20,lineSize);
   
--     local xn1 = sub_radi*math.cos(t+(math.pi*2)/5*i+math.pi*2/10);
--     local xn2 = sub_radi*math.cos(t+(math.pi*2)/5*i-math.pi*2/10);
--     local zn1 = math.sin(t+(math.pi*2)/5*i+math.pi*2/10);
--     local zn2 = math.sin(t+(math.pi*2)/5*i-math.pi*2/10);
--     drawLine(cx+x,cy+y-z*20,cx+xn1,cy-y-zn1*20, lineSize);
--     drawLine(cx+x,cy+y-z*20,cx+xn2,cy-y-zn2*20, lineSize);

--     drawPoint(cx+x,cy+y-z*20,pointSize);
--   end

--   for i=0,5,1 do
--     local y = (radius*2/3)-radius;
--     local sub_radi = radius*math.cos(y/(radius*2)*math.pi);
--     local x = sub_radi*math.cos(t+(math.pi*2)/5*i+math.pi*2/10);
--     local z = math.sin(t+(math.pi*2)/5*i+math.pi*2/10);
   
--     local shadeAmount = (z<0 and 0 or z*.75);
--     -- local shadeAmount = 2*(math.cos((t+(math.pi*2)/5*i+math.pi*2/10)+math.pi/2));
--     cairo_set_source_rgba(cr, (0x7c/0xff), (0x9f/0xff), (0xa6/0xff), 1-shadeAmount);
    
--     drawLine(cx,cy+radius,cx+x,cy-y-z*20,lineSize);
--     drawPoint(cx+x,cy-y-z*20,pointSize);
--   end
    

-- end

function draw_sphere(cx, cy, radius)
  
  local y_divisions = 10
  
  radius = radius + math.cos(t)*radius/20;

  cairo_save (cr);
  cairo_translate (cr, cx, cy);
  
  cairo_set_line_width(cr, radius/10);
  cairo_set_source_rgba(cr, 0x7c/0xff, 0x9f/0xff, 0xa6/0xff, 1);
 
  for i=0,y_divisions,1
  do

    local sub_radi = radius*math.cos(-math.pi/2 + ((math.pi/y_divisions)*i));
    local y = radius*math.sin(-math.pi/2 + (math.pi/y_divisions)*i);
    local NumberOfDots = math.floor(sub_radi/radius*y_divisions)*2;
    if(NumberOfDots == 0) then NumberOfDots = 1; end
    for j=0, NumberOfDots, 1
    do
      local angle = ((math.pi*2)/NumberOfDots);
      angle = angle*(j+0.5*0*(i % 2)) + (math.pi*2)*(t/period)*.1;
      -- local angle = ((math.pi*2)/NumberOfDots)*j+(math.pi*2)/NumberOfDots*t/period;

      angle = angle % (2*math.pi);
      local x_x = sub_radi*math.cos(angle);
      -- if(x_x > math.pi) x_x -= math.pi;

      local z = math.sin(angle);
      local shadeAmount = (z<0 and 0 or z*.75);
      -- local shadeAmount = 2*(math.cos(angle+math.pi/2));
      if(NumberOfDots == 1) then shadeAmount = 0; end
      cairo_set_source_rgba(cr, (0x7c/0xff), (0x9f/0xff), (0xa6/0xff), 1-shadeAmount);
      if(NumberOfDots == 1) then
        drawPoint(x_x, y, 10);
      else
        drawPoint(x_x, y-math.sin(angle)*10, 10);
      end
    end
  end

  -- icairo_arc (cr, 0., 0., radius, 0., 2 * math.pi);
  -- cairo_stroke(cr);
  
  cairo_restore (cr);
end
